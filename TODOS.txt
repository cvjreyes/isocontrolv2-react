DONE ‚úî
- FEEDPipes.jsx requests with axios or custom api ( recommended ) with included error handling and request state like isLoading
- TABLE make wrapper
- TABLE make routing
- TABLE get info
- TABLE display info
- TABLE implement table
- TABLE modify table
- TABLE paste from excel
- TABLE filter then paste
- TABLE paste more than 1 line
- TABLE paste more than 1 line on filtered
- TABLE copy 1 row
- TABLE copy +1 row
- TABLE copy all rows
- TABLE paste 1 cell
- TABLE paste +1 cell ‚ùå
- TABLE paste 1 row
- TABLE paste +1 row
- TABLE - when change something => update line_ref + tag
- TABLE copy row on click ID
- HIGHLIGHT CHANGES state array saving objects with id
- HIGHLIGHT CHANGES in render => check for id
- HIGHLIGHT CHANGES if match: greenish background
- HIGHLIGHT CHANGES this way when saving you only have to go throgh those specific ids + keys
- TABLE add dropdowns to: line_ref, area, diameter, train, status
- TABLE submit changes 
- TABLE delete row 
- si already exists cambiar color alerta
- a√±adir logo isocontrol
- ADDING ROW
- que se vea el owner
- IFD Main
- Edit Forecast 
- change password O- paste on IFD Add Pipe
- Trash SEAN 
- close dropdown on click delete table
- copy all not working on feed because of name of className in table.js getElementsByClassName

DOING üîÅ
  - STYLE:
    - line control T

TODO ‚ùå
  - if trashed in IFD => blocked in FEED
  - Progresses from home ? ? ? when did they stop working
  - background colors not working on table FEED
  - background colors not working on table IFD
  - click away from navbar dropdown => close dropdown
  - toast on undo: undone
  - toast OR 'copied' on copy all
  - back from forecast
  - deleted pipe modal
  - STYLE:
    - add
    - forecast
    - main
    - add
    - my tray
      - arriba
    - trays y trash
      - title bigger
      - arriba

CSV
- if _ => modelled* ???

FUTURO:
  - change status "MODELLED (100%)" to "modelled" then format on client and progress values on separate file in node
  - tabla escondida en FEED y en IFD => bring it back pipingProgress.js en old
  - add error handler for when server is down ( something like 'please hold on' )
    - mientras se actualiza lista de l√≠neas
    - encontrar soluci√≥n para que la gente no pueda cambiar cosas

TABLES que no llegu√© a probar:
  - react-virtualized
  - react-data-grid
  - react-super-responsive-table
  - react-bootstrap-table
  - react-datasheet
  - react-grid
